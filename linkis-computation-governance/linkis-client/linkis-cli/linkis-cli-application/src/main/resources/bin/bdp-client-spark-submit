#ÔºÅ/bin/bash
# set -x
#ordinary options
declare -A ord_opts=(\
        # ['--master']=true \ #not supported
        # ['--deploy-mode']=true \ #not supported
        # ['--class']=true \ #not supported
        # ['--packages']=true \
        # ['--exclude-packages']=true \
        # ['--repositories']=true \
        # ['--files']=true \
        # ['--properties-file']=true \ #not supported
        ['--proxy-user']='-proxyUser' \
        # ['--version']=true \ #not supported
        # ['--verbose']=true \ #not supported
        # ['--supervise']=true \ #not supported
        ['--kill']='--kill' \
        ['--status']='--status' \
        ['--conf']='-confMap' \
)


#options that should be put in confMap(startupMap)
declare -A confMap_opts=(\
        ['--name']='appName' \
        ['--jars']='jars' \
        ['--py-files']='spark.yarn.dist.files' \
        ['--driver-memory']='spark.driver.memory' \
        ['--driver-java-options']='spark.driver.extraJavaOptions' \
        # ['--driver-library-path']='k3' \
        ['--driver-class-path']='wds.linkis.spark.driver.extra.class.path' \
        ['--executor-memory']='spark.executor.memory' \
        #cluster mode
        ['--driver-cores']='spark.driver.cores' \
        #mesos
        # ['--total-executor-cores']=true \ #not supported
        #yarn
        ['--executor-cores']='spark.executor.cores' \
        ['--queue']='wds.linkis.yarnqueue' \
        ['--num-executors']='spark.executor.instances' \
        # ['--archives']='k10' \
        # ['--principal']=true \ #not supported
        # ['--keytab']=true \ #not supported
)

#options that should be put in varMap(for variable substitution)
declare -A varMap_opts=(\
)

#options that should be put in runtimeMap
declare -A rtMap_opts=(\
)

#options that should be put in executionMap
declare -A execMap_opts=(\
)

# for help
declare -A help_opts=(\
        ['-h']='--help' \
        ['--help']='--help' \
)

declare -A help_msg=(\
        ['--name']="Variable subsitution to apply to hive commands. e.g. -d A=B or --define A=B" \
        ['--proxy-user']="Specify the database to use" \
        ['--kill']="kill" \
        ['--status']="status" \
        ['--driver-memory']="dummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummydummy" \
        ['--driver-java-options']="k2" \
        ['--driver-library-path']="k3" \
        ['--driver-class-path']="k4" \
        ['--executor-memory']="k5" \
        #cluster mode
        ['--driver-cores']="k6" \
        #mesos
        # ['--total-executor-cores']=true \ #not supported
        #yarn
        ['--executor-cores']="k7" \
        ['--queue']="true" \
        ['--num-executors']="k8" \
        ['--archives']="true" \
        # ['--principal']=true \ #not supported
        # ['--keytab']=true \ #not supported
        ['-h,--help']="Print help information" \
)

function print_help() {
    printf "Usage:\n"
    for key in $(echo ${!help_msg[*]})
    do
        if [ -n "${help_msg[${key}]}" ]; then
            msg=${help_msg[${key}]}
            len=${#msg}
            printf " %-30s%-30s\n" "$key" "${msg: 0:50}"
            for ((i=50;i<len;i+=50))
            do
                if (( i+50<len )); then
                    printf " %-30s%-30s\n" "" "${msg: i:50}"
                else
                    printf " %-30s%-30s\n" "" "${msg: i}"
                fi
                
            done
            
        fi
    done
}


i=0
for arg in "$@"
do
        ARGS[i]=${arg}
        ((i++))
done
NUM_ARGS=$i

CONFMAP_OPTS=""
VARMAP_OPTS=""
LABELMAP_OPTS=""
REMAINS_STR=""
declare -a PARSED_CMD
j=0

function parse() {
    for((i=0;i<NUM_ARGS;i++));
    do
        arg=${ARGS[${i}]}
        if [ -n "${help_opts[${arg}]}" ]; then
            print_help
            PARSED_CMD[$j]=$arg
            break
        fi
        if [ $((${i}+1)) -lt ${NUM_ARGS} ]; then
                val=${ARGS[${i}+1]}
                if [ -n "${ord_opts[${arg}]}" ]; then
                        lks_opt=${ord_opts[${arg}]}
                        PARSED_CMD[$j]=$lks_opt
                        PARSED_CMD[$j+1]=$val
                        ((j=j+2))
                elif [ -n "${confMap_opts[${arg}]}" ]; then
                        key=${confMap_opts[${arg}]}
                        kv_str=$key"="$val
                        PARSED_CMD[$j]='-confMap'
                        PARSED_CMD[$j+1]=$kv_str
                        ((j=j+2))
                else
                        PARSED_CMD[$j]=$arg
                        PARSED_CMD[$j+1]=$val
                        ((j=j+2))
                fi
                ((i++))
        else
                PARSED_CMD[$j]=$arg
                ((j++))
        fi
    done
}

current_dir=`pwd`
if [ -n $WORK_DIR ]; then
    work_dir=`dirname "$0"`/../
    export WORK_DIR=`cd ${work_dir};pwd`
fi
cd ${current_dir}/
if (( NUM_ARGS == 0 )); then
    PARSED_CMD[$j]='--help'
    print_help
else
    parse
fi
source ${WORK_DIR}/bin/bdp-client-linkis -engineType spark-2.4.3 -codeType sql "${PARSED_CMD[@]}"