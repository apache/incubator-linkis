#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
export LANG=en_US.utf-8
#set -x

LINKIS_CLIENT='org.apache.linkis.cli.application.LinkisClientApplication'

i=0
for arg in "$@"
do
        ARG[i]=${arg}
        ((i++))
done


#===============================================
# find java_home
#===============================================
locate_java_home() {
  local JAVA8_HOME_CANDIDATES='\
    /usr/java/jdk1.8* \
    /nemo/jdk1.8*'

  JAVA_HOME_CANDIDATES="$JAVA8_HOME_CANDIDATES"

  # attempt to find java 8
  flag=""
  for candidate_regex in $JAVA_HOME_CANDIDATES ; do
      for candidate in `ls -rd $candidate_regex 2>/dev/null`; do
        if [ -e $candidate/bin/java ]; then
          export JAVA_HOME=$candidate
          flag="true"
          break 2
        fi
      done
  done

  if [ -z "$flag" ]; then
    echo -e "\033[0;31;40mNo JDK 8 found. linkis-client requires Java 1.8\033[0m" 1>&2
    exit 1
  fi

  verify_java_home
}

# Verify that JAVA_HOME set - does not verify that it's set to a meaningful
# value.
verify_java_home() {
  if [ -z "$JAVA_HOME" ]; then
    cat 1>&2 <<EOF
+======================================================================+
|      Error: JAVA_HOME is not set and Java could not be found         |
+----------------------------------------------------------------------+
EOF
    exit 1
  fi
}


function call_linkis_client() {

        LINKIS_DEPLOY_SUB_DIR='/linkis-computation-governance/linkis-client/linkis-cli/'
        LINKIS_CLIENT_LOG_DIR="/appcom/logs/linkis-cli"
        if [ ! -d $LINKIS_CLIENT_LOG_DIR ];then
            LINKIS_CLIENT_LOG_DIR="${WORK_DIR}/logs"
        fi
        LINKIS_CLIENT_CONF_DIR="/appcom/config/linkisCli-config"
        if [ ! -d $LINKIS_CLIENT_CONF_DIR ];then
            LINKIS_CLIENT_CONF_DIR="${WORK_DIR}/conf/${LINKIS_DEPLOY_SUB_DIR}"
        fi
        LINKIS_CLIENT_CONF_FILES=${LINKIS_CLIENT_CONF_FILES:-"linkis-cli.properties"}

        LINKIS_CLIENT_CLASSPATH="${LINKIS_CLIENT_CONF_DIR}:${WORK_DIR}/lib/${LINKIS_DEPLOY_SUB_DIR}*"

        LINKIS_CLIENT_HEAP_OPTS="-server -Xms32m -Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LINKIS_CLIENT_LOG_DIR} -XX:ErrorFile=${LINKIS_CLIENT_LOG_DIR}/ps_err_pid%p.log"
        LINKIS_CLIENT_GC_OPTS="-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:+DisableExplicitGC"
        LINKIS_CLIENT_LOG_OPTS="-Dlog.path=${LINKIS_CLIENT_LOG_DIR} -Dlog.file=linkis-client.${USER}.log.`date '+%Y%m%d%H%M%S%N'`"
        #DEBUG_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
        LINKIS_CLIENT_OPTS=${LINKIS_CLIENT_OPTS:-" ${DEBUG_OPTS} "}

        exec ${JAVA} ${LINKIS_CLIENT_HEAP_OPTS} ${LINKIS_CLIENT_GC_OPTS} ${LINKIS_CLIENT_OPTS} -classpath ${LINKIS_CLIENT_CLASSPATH} -Dconf.root=${LINKIS_CLIENT_CONF_DIR} ${LINKIS_CLIENT_LOG_OPTS}  ${LINKIS_CLIENT} "${ARG[@]}"
}

if [ -z $LINKIS_HOME ]; then
  current_dir=`pwd`
  work_dir=`dirname "$0"`/../
  export WORK_DIR=`cd ${work_dir};pwd`
  cd ${current_dir}/
else
  export WORK_DIR=$LINKIS_HOME
fi

locate_java_home
JAVA=${JAVA_HOME}/bin/java

call_linkis_client
